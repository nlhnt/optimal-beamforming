from pyforming import __version__
from pyforming.mrt import mrt
from pyforming.slnr_max import slnr_max
from pyforming.zfbf import zfbf
import numpy as np


def test_version():
    assert __version__ == "0.1.0"


def test_mrt_size():
    H = np.transpose(
        np.asarray(
            [
                [0.013860 + 0.031335j, 1.073221 - 0.940552j, 0.920571 - 1.373000j, 0.442014 - 0.353275j],
                [-0.067678 - 0.514558j, 0.785435 + 0.629878j, 0.230476 + 0.989237j, -1.701096 + 1.125456j],
                [0.868633 + 0.569620j, 0.191321 - 0.177566j, -0.151462 + 0.232256j, 1.203675 + 0.364566j],
                [2.037872 - 0.802488j, -2.043176 - 0.129150j, 0.487697 + 0.379195j, 0.042107 - 0.400414j],
            ]
        )
    )

    vector = np.asarray(
        [
            [
                0.005590517116029192 + 0.01263916694305734j,
                0.3969593234537447 - 0.3478881661773917j,
                0.4479778380338826 - 0.6681435452784422j,
                0.1771687477836263 - 0.1416002420132859j,
            ],
            [
                -0.0272983418022095 - 0.2075501663917567j,
                0.2905140192158856 + 0.23297712655492j,
                0.112156629090746 + 0.4813928013842755j,
                -0.6818359784525727 + 0.4511070468482195j,
            ],
            [
                0.3503685176080653 + 0.2297597662072546j,
                0.07076515901430729 - 0.06567750652324883j,
                -0.07370601431534116 + 0.1130228312106263j,
                0.4824589096464283 + 0.146125918419972j,
            ],
            [
                0.8219883330646928 - 0.3236885208808105j,
                -0.7557229709975188 - 0.04776956155726651j,
                0.2373281883478954 + 0.1845278162067436j,
                0.01687739407105918 - 0.160494570251243j,
            ],
        ]
    )
    assert mrt(H).shape == vector.shape


def test_mrt_result():
    H = np.transpose(
        np.conj(
            np.asarray(
                [
                    [0.013860 + 0.031335j, 1.073221 - 0.940552j, 0.920571 - 1.373000j, 0.442014 - 0.353275j],
                    [-0.067678 - 0.514558j, 0.785435 + 0.629878j, 0.230476 + 0.989237j, -1.701096 + 1.125456j],
                    [0.868633 + 0.569620j, 0.191321 - 0.177566j, -0.151462 + 0.232256j, 1.203675 + 0.364566j],
                    [2.037872 - 0.802488j, -2.043176 - 0.129150j, 0.487697 + 0.379195j, 0.042107 - 0.400414j],
                ]
            )
        )
    )  # conjugate (hermitian) transpose in numpy

    vector = np.asarray(
        [
            [
                0.005590517116029192 + 0.01263916694305734j,
                0.3969593234537447 - 0.3478881661773917j,
                0.4479778380338826 - 0.6681435452784422j,
                0.1771687477836263 - 0.1416002420132859j,
            ],
            [
                -0.0272983418022095 - 0.2075501663917567j,
                0.2905140192158856 + 0.23297712655492j,
                0.112156629090746 + 0.4813928013842755j,
                -0.6818359784525727 + 0.4511070468482195j,
            ],
            [
                0.3503685176080653 + 0.2297597662072546j,
                0.07076515901430729 - 0.06567750652324883j,
                -0.07370601431534116 + 0.1130228312106263j,
                0.4824589096464283 + 0.146125918419972j,
            ],
            [
                0.8219883330646928 - 0.3236885208808105j,
                -0.7557229709975188 - 0.04776956155726651j,
                0.2373281883478954 + 0.1845278162067436j,
                0.01687739407105918 - 0.160494570251243j,
            ],
        ]
    )
    assert np.allclose(mrt(H), vector)


def test_slnr_result():
    vector = np.asanyarray(
        [
            [
                0.3476628662852445 - 0.01783588486260779j,
                0.4494379818391639 - 0.1763682075947649j,
                0.3899540484325554 - 0.6482741506826423j,
                -0.2285278261440254 - 0.1696504694549773j,
            ],
            [
                0.3463798865507545 - 0.2959436304501834j,
                0.428717593984793 - 0.1745054033561354j,
                -0.06451886696333453 + 0.21950816809492j,
                -0.6133871186652898 + 0.3584529417431375j,
            ],
            [
                0.6496666894842142 - 0.006050820533212617j,
                0.4161470856235192 + 0.3345735754410368j,
                -0.4900364211614296 - 0.03295049052757694j,
                0.5475093195161629 + 0.2651127301627587j,
            ],
            [
                0.4889848952633911 - 0.1002053229938145j,
                -0.5148073666334743 - 0.05004343754291576j,
                0.3587762455059538 - 0.07340383084744746j,
                -0.1283085684196549 + 0.1665748442036544j,
            ],
        ]
    )
    H = np.conj(
        np.transpose(
            (
                [
                    [
                        0.013860 + 0.031335j,
                        1.073221 - 0.940552j,
                        0.920571 - 1.373000j,
                        0.442014 - 0.353275j,
                    ],
                    [
                        -0.067678 - 0.514558j,
                        0.785435 + 0.629878j,
                        0.230476 + 0.989237j,
                        -1.701096 + 1.125456j,
                    ],
                    [
                        0.868633 + 0.569620j,
                        0.191321 - 0.177566j,
                        -0.151462 + 0.232256j,
                        1.203675 + 0.364566j,
                    ],
                    [
                        2.037872 - 0.802488j,
                        -2.043176 - 0.129150j,
                        0.487697 + 0.379195j,
                        0.042107 - 0.400414j,
                    ],
                ]
            )
        )
    )
    assert np.allclose(slnr_max(H), vector)


def test_zfbf_result():
    H = (
        np.asarray(
            [
                [0.013860 + 0.031335j, 1.073221 - 0.940552j, 0.920571 - 1.373000j, 0.442014 - 0.353275j],
                [-0.067678 - 0.514558j, 0.785435 + 0.629878j, 0.230476 + 0.989237j, -1.701096 + 1.125456j],
                [0.868633 + 0.569620j, 0.191321 - 0.177566j, -0.151462 + 0.232256j, 1.203675 + 0.364566j],
                [2.037872 - 0.802488j, -2.043176 - 0.129150j, 0.487697 + 0.379195j, 0.042107 - 0.400414j],
            ]
        )
        .transpose()
        .conj()
    )
    vector = np.asarray(
        [
            [
                0.3879614290224073 + 0.09872028990717077j,
                0.3406564576226037 + 0.05635336231117433j,
                0.2204253968379605 - 0.5742745067676878j,
                -0.3278458767505699 - 0.05156352160548806j,
            ],
            [
                0.3411405788153983 - 0.3162812665800751j,
                0.4526354346504607 - 0.1702665822637207j,
                -0.2110303708731221 + 0.1036004519893354j,
                -0.4495672529458771 + 0.3576682857477722j,
            ],
            [
                0.7236994467439906 - 0.150669495088244j,
                0.6066910616540805 + 0.3688901068039437j,
                -0.6464264434179551 - 0.193962534531747j,
                0.5495144699416846 + 0.4298114980905241j,
            ],
            [
                0.2684473029079276 + 0.06945040994327685j,
                -0.3751410719745281 + 0.04497945784785218j,
                0.2968207211063859 - 0.1508754857232733j,
                -0.2078596978975164 + 0.1729486519464096j,
            ],
        ]
    )
    assert np.allclose(zfbf(H), vector)